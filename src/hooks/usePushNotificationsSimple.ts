'use client';

import { useState, useEffect, useCallback } from 'react';
import { getMessaging, getToken, isSupported } from 'firebase/messaging';
import { doc, setDoc, getDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { useAuth } from './useAuth';

interface PushNotificationState {
  isSupported: boolean;
  permission: { granted: boolean; denied: boolean; default: boolean };
  token: string | null;
  isSubscribed: boolean;
  isLoading: boolean;
  error: string | null;
}

export function usePushNotificationsSimple() {
  const { user } = useAuth();
  const [state, setState] = useState<PushNotificationState>({
    isSupported: false,
    permission: { granted: false, denied: false, default: true },
    token: null,
    isSubscribed: false,
    isLoading: false,
    error: null,
  });

  // V√©rifier le support des notifications
  useEffect(() => {
    const checkSupport = async () => {
      try {
        const supported = await isSupported();
        console.log('üì± Support des notifications:', supported);
        setState(prev => ({ ...prev, isSupported: supported }));
      } catch (error) {
        console.error('Erreur v√©rification support:', error);
        setState(prev => ({ ...prev, isSupported: false }));
      }
    };
    checkSupport();
  }, []);

  // V√©rifier la permission
  const checkPermission = useCallback(() => {
    if (!state.isSupported) return;
    
    const permission = Notification.permission;
    console.log('üìù Permission actuelle:', permission);
    
    setState(prev => ({
      ...prev,
      permission: {
        granted: permission === 'granted',
        denied: permission === 'denied',
        default: permission === 'default',
      },
    }));
  }, [state.isSupported]);

  // Demander la permission
  const requestPermission = useCallback(async (): Promise<boolean> => {
    if (!state.isSupported) {
      console.log('‚ùå Notifications non support√©es');
      return false;
    }

    setState(prev => ({ ...prev, isLoading: true, error: null }));

    try {
      console.log('üìù Demande de permission...');
      const permission = await Notification.requestPermission();
      console.log('üìù Permission obtenue:', permission);
      
      setState(prev => ({
        ...prev,
        permission: {
          granted: permission === 'granted',
          denied: permission === 'denied',
          default: permission === 'default',
        },
        isLoading: false,
      }));

      return permission === 'granted';
    } catch (error) {
      console.error('‚ùå Erreur demande permission:', error);
      setState(prev => ({
        ...prev,
        isLoading: false,
        error: 'Erreur lors de la demande de permission',
      }));
      return false;
    }
  }, [state.isSupported]);

  // S'abonner aux notifications - Version ultra-simplifi√©e
  const subscribe = useCallback(async (): Promise<boolean> => {
    if (!user || !state.isSupported) {
      setState(prev => ({ ...prev, error: 'Utilisateur non connect√© ou notifications non support√©es' }));
      return false;
    }

    setState(prev => ({ ...prev, isLoading: true, error: null }));

    try {
      console.log('üöÄ === D√âBUT SUBSCRIPTION SIMPLIFI√âE ===');
      console.log('üë§ Utilisateur:', user.uid);
      console.log('üì± Support:', state.isSupported);
      console.log('üìù Permission:', Notification.permission);
      
      // V√©rifier la permission
      if (Notification.permission !== 'granted') {
        console.log('üìù Demande de permission...');
        const granted = await requestPermission();
        if (!granted) {
          setState(prev => ({ ...prev, isLoading: false, error: 'Permission refus√©e' }));
          return false;
        }
      }

      // Attendre le service worker
      if ('serviceWorker' in navigator) {
        console.log('üîß Attente du service worker...');
        const registration = await navigator.serviceWorker.ready;
        console.log('üîß Service Worker pr√™t:', registration.active?.scriptURL);
        await new Promise(resolve => setTimeout(resolve, 2000)); // Attendre 2 secondes
      }

      // Obtenir le token FCM
      console.log('üîë G√©n√©ration du token FCM...');
      const messaging = getMessaging();
      
      const vapidKey = process.env.NEXT_PUBLIC_FIREBASE_VAPID_KEY;
      console.log('üîë Cl√© VAPID disponible:', !!vapidKey);
      console.log('üîë Cl√© VAPID (d√©but):', vapidKey?.substring(0, 10) + '...');
      
      if (!vapidKey) {
        throw new Error('Cl√© VAPID manquante');
      }
      
      const token = await getToken(messaging, { vapidKey });
      
      if (!token) {
        throw new Error('Token FCM vide');
      }

      console.log('üîë Token FCM obtenu:', token.substring(0, 20) + '...');
      console.log('üîë Token FCM complet:', token);

      // Sauvegarder dans Firestore
      console.log('üíæ Sauvegarde dans Firestore...');
      await setDoc(doc(db, 'users', user.uid), {
        fcmToken: token,
        pushNotificationsEnabled: true,
        lastTokenUpdate: new Date(),
      }, { merge: true });

      console.log('üíæ Sauvegarde r√©ussie');

      // Mettre √† jour l'√©tat
      console.log('üîÑ Mise √† jour de l\'√©tat local...');
      setState(prev => ({
        ...prev,
        isSubscribed: true,
        token: token,
        isLoading: false,
        error: null,
      }));

      console.log('‚úÖ === SUBSCRIPTION R√âUSSIE ===');
      console.log('üìä √âtat final:', {
        isSubscribed: true,
        token: token ? 'Pr√©sent' : 'Absent',
        isLoading: false,
        error: null
      });
      return true;
      
    } catch (error) {
      console.error('‚ùå === ERREUR SUBSCRIPTION ===');
      console.error('‚ùå Erreur:', error);
      
      let errorMessage = 'Erreur lors de l\'abonnement';
      if (error instanceof Error) {
        errorMessage = `${error.name}: ${error.message}`;
        console.error('‚ùå Stack:', error.stack);
      }
      
      setState(prev => ({
        ...prev,
        isLoading: false,
        error: errorMessage,
      }));
      return false;
    }
  }, [user, state.isSupported, requestPermission]);

  // Se d√©sabonner
  const unsubscribe = useCallback(async (): Promise<boolean> => {
    if (!user) return false;

    setState(prev => ({ ...prev, isLoading: true, error: null }));

    try {
      await setDoc(doc(db, 'users', user.uid), {
        fcmToken: null,
        pushNotificationsEnabled: false,
        lastTokenUpdate: new Date(),
      }, { merge: true });

      setState(prev => ({
        ...prev,
        isSubscribed: false,
        token: null,
        isLoading: false,
        error: null,
      }));

      return true;
    } catch (error) {
      console.error('Erreur d√©sabonnement:', error);
      setState(prev => ({
        ...prev,
        isLoading: false,
        error: 'Erreur lors du d√©sabonnement',
      }));
      return false;
    }
  }, [user]);

  // Initialiser l'√©tat depuis Firestore
  useEffect(() => {
    if (!user) return;
    
    const initializeState = async () => {
      try {
        console.log('üîÑ === INITIALISATION √âTAT ===');
        console.log('üë§ Utilisateur:', user.uid);
        
        checkPermission();
        
        console.log('üìñ Lecture Firestore...');
        const userDoc = await doc(db, 'users', user.uid);
        const userSnap = await getDoc(userDoc);
        
        if (userSnap.exists()) {
          const userData = userSnap.data();
          const hasToken = !!userData.fcmToken;
          const isEnabled = userData.pushNotificationsEnabled === true;
          
          console.log('üìä Donn√©es Firestore:', {
            hasToken,
            isEnabled,
            fcmToken: userData.fcmToken ? 'Pr√©sent' : 'Absent',
            pushNotificationsEnabled: userData.pushNotificationsEnabled,
            lastTokenUpdate: userData.lastTokenUpdate
          });
          
          const newState = {
            isSubscribed: hasToken && isEnabled,
            token: userData.fcmToken || null
          };
          
          console.log('üîÑ Nouvel √©tat calcul√©:', newState);
          
          setState(prev => ({
            ...prev,
            ...newState
          }));
          
          console.log('‚úÖ √âtat initialis√©');
        } else {
          console.log('‚ùå Document utilisateur non trouv√©');
        }
      } catch (error) {
        console.error('‚ùå Erreur initialisation:', error);
      }
    };
    
    initializeState();
  }, [user, checkPermission]);

  return {
    ...state,
    subscribe,
    unsubscribe,
    requestPermission,
    checkPermission,
  };
}
